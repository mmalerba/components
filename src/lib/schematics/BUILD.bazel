package(default_visibility = ["//visibility:public"])

load("@build_bazel_rules_typescript//:defs.bzl", "ts_library")
load("@build_bazel_rules_nodejs//:defs.bzl", "npm_package")
load("//:packages.bzl", "VERSION_PLACEHOLDER_REPLACEMENTS")
load("//tools:defaults.bzl", "jasmine_node_test")

filegroup(
  name = "schematics_assets",
  srcs = glob(["**/files/**/*", "**/*.json"]) + ["README.md"],
)

ts_library(
  name = "schematics",
  module_name = "@angular/material/schematics",
  srcs = glob(["**/*.ts"], exclude=[
    "**/files/**/*.ts",
    "**/*.spec.ts",
    "ng-update/test-cases/**/*",
  ]),
  deps = [
    "//src/cdk/schematics",
    "@npm//:@angular-devkit/schematics",
    "@npm//:@schematics/angular",
    # TODO(devversion): Only include jasmine for test sources (See: tsconfig types).
    "@npm//:@types/jasmine",
    "@npm//:@types/node",
    "@npm//:parse5",
    "@npm//:tslint",
    "@npm//:typescript",
  ],
  tsconfig = ":tsconfig.json",
)

# This package is intended to be combined into the main @angular/material package as a dep.
npm_package(
  name = "npm_package",
  srcs = [":schematics_assets"],
  deps = [":schematics"],
  replacements = VERSION_PLACEHOLDER_REPLACEMENTS,
)

### Testing rules

jasmine_node_test(
  name = "unit_tests",
  srcs = [":schematics_test_sources"],
  data = [":node_loader_workaround", ":schematics_assets", ":schematics_test_cases"],
)

ts_library(
  name = "schematics_test_sources",
  srcs = glob(["**/*.spec.ts"], exclude=["**/files/**/*.spec.ts"]),
  deps = [
    ":schematics",
    "//src/cdk/schematics",
    "@npm//:@schematics/angular",
    "@npm//:@angular-devkit/schematics",
    "@npm//:@types/jasmine",
    "@npm//:@types/node",
    "@npm//:fs-extra",
  ],
  tsconfig = ":tsconfig.json",
  testonly = True,
)

filegroup(
  name = "schematics_test_cases",
  srcs = glob([
    "ng-update/test-cases/**/*_input.ts",
    "ng-update/test-cases/**/*_expected_output.ts"
  ]),
  testonly = True,
)

# Filegroup that references a text file which comes alphabetically before the
# "cdk/schematics/index.js" file. This is necessary because on Windows in order to support absolute
# paths, the NodeJS rules resolve the actual workspace root by looking for the first entry that
# refers to the Bazel "USER_WORKSPACE" in the MANIFEST file. Since it's alphabetically ordered, and
# the CDK comes always before the Material schematics, we need to make sure that it doesn't resolve
# to the CDK bazel output which has been built as dependency.
# See more: https://github.com/bazelbuild/rules_nodejs/issues/352
filegroup(
  name = "node_loader_workaround",
  srcs = ["//src/cdk/schematics:#bazel_workaround.txt"],
  testonly = True,
)
